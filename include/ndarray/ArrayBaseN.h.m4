// -*- c++ -*-
/*
 * Copyright (c) 2010-2012, Jim Bosch
 * All rights reserved.
 *
 * ndarray is distributed under a simple BSD-like license;
 * see the LICENSE file that should be present in the root
 * of the source distribution, or alternately available at:
 * https://github.com/ndarray/ndarray
 */
// THIS FILE IS MACHINE GENERATED BY SCONS. DO NOT EDIT MANUALLY.
changecom(`###')dnl
define(`SPECIALIZE',
`
/**
 *  @brief An intermediate CRTP base class for Array and ArrayRef (specialization for $1).
 */
template <typename Derived>
class ArrayBaseN<Derived,$1> : public ArrayBase< Derived > {
    typedef ArrayBase<Derived> Super;
protected:
    typedef typename Super::Core Core;
    typedef typename Super::CorePtr CorePtr;
public:
    typedef typename Super::Element Element;

    Element & operator()($2) const {
        return this->operator[](makeVector($3));
    }

private:
    template <typename T_, int N_, int C_> friend class Array;
    template <typename T_, int N_, int C_> friend class ArrayRef;

    void operator=(ArrayBaseN const & other) {
        Super::operator=(other);
    }

    template <typename Other>
    ArrayBaseN(ArrayBaseN<Other,$1> const & other) : Super(other) {}

    ArrayBaseN(Element * data, CorePtr const & core) : Super(data, core) {}
};')dnl
#ifndef NDARRAY_ArrayBaseN_h_INCLUDED
#define NDARRAY_ArrayBaseN_h_INCLUDED

/** 
 *  @file ndarray/ArrayBaseN.h
 *
 *  @brief Definition of ArrayBaseN, a dimension-specialized CRTP base class for Array and ArrayRef.
 */
#include <cstddef>
#include "ndarray/ArrayBase.h"

namespace ndarray {

/**
 *  @brief An intermediate CRTP base class for Array and ArrayRef.
 */
template <typename Derived, int N = ArrayBase<Derived>::ND::value>
class ArrayBaseN : public ArrayBase< Derived > {
    typedef ArrayBase<Derived> Super;
protected:
    typedef typename Super::Core Core;
    typedef typename Super::CorePtr CorePtr;
public:
    typedef typename Super::Element Element;
private:
    template <typename T_, int N_, int C_> friend class Array;
    template <typename T_, int N_, int C_> friend class ArrayRef;
    void operator=(ArrayBaseN const & other) {
        Super::operator=(other);
    }
    /// @internal @brief Construct an ArrayRef from a pointer and Core.
    ArrayBaseN(Element * data, CorePtr const & core) : Super(data, core) {}
};

SPECIALIZE(1, `std::size_t n0', `n0')
SPECIALIZE(2, `std::size_t n0, std::size_t n1', `n0, n1')
SPECIALIZE(3, `std::size_t n0, std::size_t n1, std::size_t n2', `n0, n1, n2')
SPECIALIZE(4, `std::size_t n0, std::size_t n1, std::size_t n2, std::size_t n3', `n0, n1, n2, n3')
SPECIALIZE(5, `std::size_t n0, std::size_t n1, std::size_t n2, std::size_t n3, std::size_t n4', `n0, n1, n2, n3, n4')
SPECIALIZE(6, `std::size_t n0, std::size_t n1, std::size_t n2, std::size_t n3, std::size_t n4, std::size_t n5', `n0, n1, n2, n3, n4, n5')

} // namespace ndarray

#endif // !NDARRAY_ArrayBaseN_h_INCLUDED
